@page "/deploy"
@using GenZPlatformApp.Data.Model
@using System.Text.Json
@using GenzPlatformApp.Data.Model
@inject HttpClient HttpClient;
@inherits GenZPlatformApp.Client.ViewModels.DeployedDetailsBase;
@inject Blazored.LocalStorage.ILocalStorageService localstorage
@inject NavigationManager NavManager;



<div class="deploy-form">
    <EditForm Model="@DeployFormModel" Context="editFormContext" OnValidSubmit="OnValidSubmit" style="width:100%">
        <DataAnnotationsValidator />
        <div class="icon-div">
            <ion-icon class="cloud-icon" name="cloud-upload"></ion-icon>
        </div>
        <h3 style="text-align:center">Deploy Here</h3>

        <div class="form-field">
            <label class="form-label col-4">Github Link</label>
            <div class="col-8">
                <InputText class="form-value" id="githublink" placeholder="Github Link"
                           @bind-Value="DeployFormModel.GitHubLink" />
            </div>
            <ValidationMessage class="validation-message" For="@(() => DeployFormModel.GitHubLink)" />
        </div>
        <div class="form-field">
            <label class="form-label col-4">App Name</label>
            <div class="col-8">
                <InputText class="form-value" id="appname" placeholder="App Name"
                           @bind-Value="DeployFormModel.AppName" />
            </div>
            <ValidationMessage class="validation-message" For="@(() => DeployFormModel.AppName)" />
        </div>
        <div class="form-field">
            <label class="form-label col-4">Custom Url</label>
            <div class="col-8">
                <InputText class="form-value" id="customurl" placeholder="Custom Url"
                           @bind-Value="DeployFormModel.CustomUrl" />
            </div>
            <label class="localhost"> .localhost</label>
        </div>
            <div class="row">
                <label class="col-4"></label>
                <label class="col-8" style="font-size:x-small;color:green">Eg: app1(or)app1.domain</label>
            </div>
            <ValidationMessage class="validation-message" For="@(() => DeployFormModel.CustomUrl)" />

        <div class="button-div" style="display:flex; justify-content:flex-end;margin-top:30px;">
            <button class="deploy-button" type="submit">@deployButtonText</button>
        </div>
    </EditForm>
</div>
@code {

    List<User> user = new List<User>();
    public string deployButtonText = "Deploy";


    private async Task OnValidSubmit()
    {
        DeployFormModel.UserId = user[0].UserId;
        deployButtonText = "Deploying...";

        await HttpClient.PostAsJsonAsync<DeployFormModel>("Deploy/DeployApp" , DeployFormModel);

        StateHasChanged();
        deployButtonText = "Deploy";
    }

    protected override async Task OnInitializedAsync()
    {
        if (await localstorage.GetItemAsync<string>("User") is null)
        {
            user.Add(new User() { UserId = 1 });

            await localstorage.SetItemAsync("User", JsonSerializer.Serialize(user));
        }

        user = JsonSerializer.Deserialize<List<User>>(await localstorage.GetItemAsync<string>("User"));
    
    }

    }

}
